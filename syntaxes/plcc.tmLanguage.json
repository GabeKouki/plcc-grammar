{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "PLCC Grammar",
  "scopeName": "source.plcc",
  "patterns": [
    { "include": "#comments" },
    { "include": "#sectionSeparator" },
    { "include": "#includeDirective" },
    { "include": "#tokenDefinition" },
    { "include": "#grammarRuleWithLabel" },
    { "include": "#grammarRuleNoLabel" },
    { "include": "#separatorNotation" },
    { "include": "#rhsUppercaseNonterminal" },
    { "include": "#rhsLowercaseNonterminal" },
    { "include": "#bareTerminal" }
  ],
  "repository": {
    "comments": {
      "name": "comment.line.plcc",
      "match": "#.*$"
    },
    "sectionSeparator": {
      "name": "keyword.operator.plcc",
      "match": "^%$"
    },
    "includeDirective": {
      "match": "^(%include)\\s+(\\w+)",
      "captures": {
        "1": {
          "name": "keyword.control.plcc"
        },
        "2": {
          "name": "variable.parameter.plcc"
        }
      }
    },
    "tokenDefinition": {
      "match": "^(skip\\s+)?(\\w+)\\s+('(?:[^'\\\\]|\\\\.)*')",
      "captures": {
        "1": {
          "name": "keyword.control.plcc"
        },
        "2": {
          "name": "entity.name.type.plcc"
        },
        "3": {
          "name": "string.quoted.single.plcc"
        }
      }
    },
    "grammarRuleWithLabel": {
      "match": "(<\\w+>)(:)(\\w+)\\s*(::=|\\*\\*=)",
      "captures": {
        "1": {
          "name": "variable.other.plcc"
        },
        "2": {
          "name": "comment.line.plcc"
        },
        "3": {
          "name": "entity.name.function.plcc"
        },
        "4": {
          "name": "keyword.operator.plcc"
        }
      }
    },
    "grammarRuleNoLabel": {
      "match": "(<\\w+>)\\s*(::=|\\*\\*=)",
      "captures": {
        "1": {
          "name": "variable.other.plcc"
        },
        "2": {
          "name": "keyword.operator.plcc"
        }
      }
    },
    "separatorNotation": {
      "name": "constant.numeric.plcc",
      "match": "\\+[A-Z][A-Z0-9]*"
    },
    "rhsUppercaseNonterminal": {
      "name": "entity.name.type.plcc",
      "match": "<[A-Z][A-Z0-9]*>"
    },
    "rhsLowercaseNonterminal": {
      "name": "variable.other.plcc",
      "match": "<[a-z][a-z0-9]*>"
    },
    "bareTerminal": {
      "name": "entity.name.type.plcc",
      "match": "\\b[A-Z][A-Z0-9]*\\b"
    }
  }
}